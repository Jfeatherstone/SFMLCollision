<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="_vector_math_8cpp" kind="file" language="C++">
    <compoundname>VectorMath.cpp</compoundname>
    <includes refid="_vector_math_8hpp" local="yes">VectorMath.hpp</includes>
    <incdepgraph>
      <node id="58">
        <label>SFML/Graphics.hpp</label>
      </node>
      <node id="56">
        <label>src/VectorMath.cpp</label>
        <link refid="_vector_math_8cpp"/>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>tgmath.h</label>
      </node>
      <node id="57">
        <label>VectorMath.hpp</label>
        <link refid="_vector_math_8hpp_source"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;VectorMath.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VectorMath::dot(Vector2f<sp/>v1,<sp/>Vector2f<sp/>v2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>v1.x<sp/>*<sp/>v2.x<sp/>+<sp/>v1.y<sp/>*<sp/>v2.y;</highlight></codeline>
<codeline lineno="5"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VectorMath::dot(Vector3f<sp/>v1,<sp/>Vector3f<sp/>v2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>=<sp/>v1.x<sp/>*<sp/>v2.x<sp/>+<sp/>v1.y<sp/>*<sp/>v2.y<sp/>+<sp/>v1.z<sp/>*<sp/>v2.z;</highlight></codeline>
<codeline lineno="9"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VectorMath::angleBetween(Vector2f<sp/>v1,<sp/>Vector2f<sp/>v2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&amp;<sp/>angle)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>dot;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorMath::dot(v1,<sp/>v2,<sp/>dot);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mag1<sp/>=<sp/>sqrt(pow(v1.x,<sp/>2)<sp/>+<sp/>pow(v1.y,<sp/>2));</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mag2<sp/>=<sp/>sqrt(pow(v2.x,<sp/>2)<sp/>+<sp/>pow(v2.y,<sp/>2));</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>angle<sp/>=<sp/>acos(dot<sp/>/<sp/>(mag1<sp/>*<sp/>mag2));</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VectorMath::rotate(Vector2f&amp;<sp/>p,<sp/>Vector2f<sp/>origin,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angleInDegrees)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>angleInDegrees<sp/>*=<sp/>M_PI<sp/>/<sp/>180.0f;<sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>to<sp/>radians</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>-=<sp/>origin;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector2f<sp/>pp;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>pp.x<sp/>=<sp/>p.x<sp/>*<sp/>cos(angleInDegrees)<sp/>-<sp/>p.y<sp/>*<sp/>sin(angleInDegrees);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>pp.y<sp/>=<sp/>p.x<sp/>*<sp/>sin(angleInDegrees)<sp/>+<sp/>p.y<sp/>*<sp/>cos(angleInDegrees);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>pp<sp/>+<sp/>origin;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>VectorMath::mag(Vector2f<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sqrt(v.x<sp/>*<sp/>v.x<sp/>+<sp/>v.y<sp/>*<sp/>v.y);</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VectorMath::normalize(Vector2f&amp;<sp/>v,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>magnitude)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>denom<sp/>=<sp/>magnitude<sp/>/<sp/>sqrt(v.x*v.x<sp/>+<sp/>v.y*v.y);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>v.x<sp/>*=<sp/>denom;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>v.y<sp/>*=<sp/>denom;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>VectorMath::quadrant(Vector2f<sp/>point,<sp/>Vector2f<sp/>origin)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>we<sp/>want<sp/>to<sp/>account<sp/>for<sp/>the<sp/>origin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>point<sp/>-=<sp/>origin;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/>A<sp/>note<sp/>about<sp/>the<sp/>equals<sp/>below:</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/>We<sp/>assume<sp/>that<sp/>if<sp/>a<sp/>point<sp/>is<sp/>on<sp/>any<sp/>of<sp/>the<sp/>axes,<sp/>it<sp/>will<sp/>be<sp/>counted<sp/>as<sp/>a<sp/>part<sp/>of<sp/>the<sp/>upper<sp/>quadrant.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>means<sp/>that<sp/>a<sp/>point<sp/>on<sp/>the<sp/>x<sp/>axis<sp/>with<sp/>a<sp/>positive<sp/>x<sp/>will<sp/>be<sp/>in<sp/>quadrant<sp/>1<sp/>and<sp/>if<sp/>it<sp/>has<sp/>a<sp/>negative<sp/>x</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/>it<sp/>will<sp/>be<sp/>in<sp/>the<sp/>2nd<sp/>quadrant</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(point.x<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>point.y<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(point<sp/>.x<sp/>&lt;=<sp/>0<sp/>&amp;&amp;<sp/>point.y<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(point.x<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>point.y<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/VectorMath.cpp"/>
  </compounddef>
</doxygen>

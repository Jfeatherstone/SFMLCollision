<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="_line_8cpp" kind="file" language="C++">
    <compoundname>Line.cpp</compoundname>
    <includes refid="_line_8hpp" local="yes">Line.hpp</includes>
    <incdepgraph>
      <node id="10">
        <label>SFML/Graphics.hpp</label>
      </node>
      <node id="8">
        <label>src/Line.cpp</label>
        <link refid="_line_8cpp"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>Line.hpp</label>
        <link refid="_line_8hpp_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>tgmath.h</label>
      </node>
      <node id="11">
        <label>iostream</label>
      </node>
      <node id="13">
        <label>VectorMath.hpp</label>
        <link refid="_vector_math_8hpp_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Line.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>value<sp/>is<sp/>to<sp/>denote<sp/>a<sp/>vertical<sp/>line,<sp/>which<sp/>would<sp/>otherwise<sp/>have<sp/>a<sp/>slope<sp/>of<sp/>nan,<sp/>or<sp/>infinity</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment">The<sp/>only<sp/>importance<sp/>in<sp/>the<sp/>value<sp/>is<sp/>that<sp/>no<sp/>other<sp/>line<sp/>should<sp/>every<sp/>organically<sp/>have<sp/>this<sp/>slope,<sp/>and<sp/>that</highlight></codeline>
<codeline lineno="7"><highlight class="comment">this<sp/>is<sp/>an<sp/>arbitrarily<sp/>high<sp/>number,<sp/>to<sp/>simulate<sp/>a<sp/>vertical<sp/>line<sp/>without<sp/>actually<sp/>being<sp/>one</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Line::VERTICAL_SLOPE<sp/>=<sp/>100000;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/>CONSTRUCTORS</highlight></codeline>
<codeline lineno="14"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">Line::Line(Vector2f<sp/>p1,<sp/>Vector2f<sp/>p2)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>automatically<sp/>assigns<sp/>our<sp/>slope<sp/>member<sp/>variable<sp/>so<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>set<sp/>it<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p1.x<sp/>==<sp/>p2.x)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_vertical<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p1.y<sp/>==<sp/>p2.y)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_horizontal<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>calculateSlope(p1,<sp/>p2);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>m_start<sp/>=<sp/>p1;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>m_end<sp/>=<sp/>p2;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>calculateQuadrant();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>calculateIntercept();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>calculateAngle();</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">Line::Line()<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/>SLOPE</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="41"><highlight class="comment">This<sp/>is<sp/>a<sp/>simple<sp/>y2-y1/x2-x1<sp/>calculation</highlight></codeline>
<codeline lineno="42"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Line::calculateSlope(Vector2f<sp/>p1,<sp/>Vector2f<sp/>p2)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_horizontal)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_slope<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_slope;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_vertical)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_slope<sp/>=<sp/>VERTICAL_SLOPE;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_slope;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>m_slope<sp/>=<sp/>(p2.y-p1.y)/(p2.x-p1.x);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_slope;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/>INTERCEPT</highlight></codeline>
<codeline lineno="60"><highlight class="comment"></highlight></codeline>
<codeline lineno="61"><highlight class="comment">This<sp/>will<sp/>use<sp/>y<sp/>=<sp/>mx<sp/>+<sp/>b<sp/>to<sp/>find<sp/>the<sp/>intercept</highlight></codeline>
<codeline lineno="62"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Line::calculateIntercept()<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>m_intercept<sp/>=<sp/>m_start.y<sp/>-<sp/>m_slope*m_start.x;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_intercept;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/>QUADRANT</highlight></codeline>
<codeline lineno="71"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Line::calculateQuadrant()<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector2f<sp/>v<sp/>=<sp/>m_end<sp/>-<sp/>m_start;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.x<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>v.y<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_quadrant<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.x<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>v.y<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_quadrant<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.x<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>v.y<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_quadrant<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.x<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>v.y<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_quadrant<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_quadrant;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/>ANGLE</highlight></codeline>
<codeline lineno="87"><highlight class="comment"></highlight></codeline>
<codeline lineno="88"><highlight class="comment">Depending<sp/>on<sp/>the<sp/>value<sp/>for<sp/>the<sp/>slope,<sp/>we<sp/>calculate<sp/>the<sp/>angle<sp/>differently,<sp/>based<sp/>on<sp/>which<sp/>quadrant</highlight></codeline>
<codeline lineno="89"><highlight class="comment">the<sp/>line<sp/>runs<sp/>through</highlight></codeline>
<codeline lineno="90"><highlight class="comment"></highlight></codeline>
<codeline lineno="91"><highlight class="comment">For<sp/>this<sp/>calculate<sp/>we<sp/>assume<sp/>that<sp/>intercept<sp/>is<sp/>0,<sp/>i.e.<sp/>our<sp/>coordinate<sp/>origin<sp/>is<sp/>situated<sp/>on<sp/>top<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="92"><highlight class="comment">line.</highlight></codeline>
<codeline lineno="93"><highlight class="comment"></highlight></codeline>
<codeline lineno="94"><highlight class="comment">It<sp/>is<sp/>also<sp/>important<sp/>to<sp/>note<sp/>that<sp/>we<sp/>convert<sp/>everything<sp/>into<sp/>degrees,<sp/>because<sp/>Transofrmable&apos;s<sp/>setRotation()<sp/>method<sp/>takes</highlight></codeline>
<codeline lineno="95"><highlight class="comment">the<sp/>angle<sp/>value<sp/>in<sp/>degrees.</highlight></codeline>
<codeline lineno="96"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Line::calculateAngle()<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>first<sp/>thing<sp/>we<sp/>want<sp/>to<sp/>deal<sp/>with<sp/>are<sp/>the<sp/>edge<sp/>cases<sp/>for<sp/>lines:<sp/>horizontal<sp/>and<sp/>vertical</highlight></codeline>
<codeline lineno="102"><highlight class="comment"></highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/>These<sp/>have<sp/>to<sp/>be<sp/>handled<sp/>separately<sp/>because<sp/>the<sp/>slope<sp/>of<sp/>a<sp/>vertical<sp/>line<sp/>would<sp/>be<sp/>nan<sp/>if<sp/>allowed</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/>to<sp/>be<sp/>calculated<sp/>the<sp/>other<sp/>way,<sp/>and<sp/>these<sp/>calculations<sp/>would<sp/>make<sp/>no<sp/>sense.<sp/></highlight></codeline>
<codeline lineno="105"><highlight class="comment"></highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/><sp/>One<sp/>other<sp/>thing<sp/>to<sp/>not<sp/>is<sp/>that<sp/>even<sp/>though<sp/>we<sp/>treat<sp/>180<sp/>and<sp/>0<sp/>as<sp/>different<sp/>values,<sp/>they<sp/>actually<sp/>represent<sp/>the</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/>same<sp/>exact<sp/>line/rotation.<sp/>This<sp/>may<sp/>not<sp/>be<sp/>true<sp/>in<sp/>reality,<sp/>but<sp/>for<sp/>our<sp/>limited<sp/>scope<sp/>--<sp/>since<sp/>a<sp/>line<sp/>is<sp/>symmetric<sp/>--</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>differentiation<sp/>is<sp/>for<sp/>the<sp/>sake<sp/>of<sp/>clarity<sp/>only.<sp/>Same<sp/>deal<sp/>with<sp/>270<sp/>and<sp/>90<sp/>below.</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_horizontal)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_start.x<sp/>&gt;<sp/>m_end.x)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_angle<sp/>=<sp/>180;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_angle<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_angle;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_vertical)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_start.y<sp/>&gt;<sp/>m_end.y)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_angle<sp/>=<sp/>90;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_angle<sp/>=<sp/>270;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_angle;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>next<sp/>part<sp/>accounts<sp/>for<sp/>any<sp/>angle<sp/>that<sp/>isn&apos;t<sp/>an<sp/>integer<sp/>multiple<sp/>of<sp/>PI/2.</highlight></codeline>
<codeline lineno="130"><highlight class="comment"></highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/>Depending<sp/>on<sp/>what<sp/>quadrant<sp/>our<sp/>line<sp/>is<sp/>in,<sp/>we<sp/>have<sp/>to<sp/>do<sp/>a<sp/>few<sp/>adjustments<sp/>to<sp/>the<sp/>actual<sp/>angle,<sp/>since<sp/>we<sp/>are</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/>setting<sp/>0<sp/>degrees<sp/>to<sp/>be<sp/>on<sp/>the<sp/>x-axis<sp/>in<sp/>a<sp/>cartesian<sp/>plane.</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>first<sp/>act<sp/>as<sp/>though<sp/>the<sp/>start<sp/>point<sp/>is<sp/>our<sp/>origin<sp/>(0,<sp/>0),<sp/>and<sp/>calculate<sp/>what<sp/>the<sp/>second<sp/>points<sp/>would<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector2f<sp/>v<sp/>=<sp/>m_end<sp/>-<sp/>m_start;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(m_quadrant)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_angle<sp/>=<sp/>atan(abs(v.y/v.x))<sp/>*<sp/>180<sp/>/M_PI;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_angle<sp/>=<sp/>180<sp/>-<sp/>atan(abs(v.y/v.x))<sp/>*<sp/>180<sp/>/M_PI;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_angle<sp/>=<sp/>180<sp/>+<sp/>atan(abs(v.y/v.x))<sp/>*<sp/>180<sp/>/M_PI;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_angle<sp/>=<sp/>360<sp/>-<sp/>atan(abs(v.y/v.x))<sp/>*<sp/>180<sp/>/M_PI;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>we<sp/>longer<sp/>want<sp/>our<sp/>answer<sp/>in<sp/>radians</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//m_angle<sp/>*=<sp/>M_PI<sp/>/<sp/>180;<sp/>//<sp/>Convert<sp/>back<sp/>to<sp/>radians</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_angle;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/>Y<sp/>VALUE</highlight></codeline>
<codeline lineno="162"><highlight class="comment"></highlight></codeline>
<codeline lineno="163"><highlight class="comment">This<sp/>will<sp/>give<sp/>the<sp/>y<sp/>value<sp/>at<sp/>any<sp/>given<sp/>x<sp/>on<sp/>the<sp/>line</highlight></codeline>
<codeline lineno="164"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Line::y(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_slope*x<sp/>+<sp/>m_intercept;</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/><sp/>INTERSECTS</highlight></codeline>
<codeline lineno="172"><highlight class="comment"></highlight></codeline>
<codeline lineno="173"><highlight class="comment">We<sp/>use<sp/>the<sp/>following<sp/>method<sp/>for<sp/>line<sp/>intersection:</highlight></codeline>
<codeline lineno="174"><highlight class="comment">http://ahinson.com/algorithms_general/Sections/Geometry/ParametricLineIntersection.pdf</highlight></codeline>
<codeline lineno="175"><highlight class="comment"></highlight></codeline>
<codeline lineno="176"><highlight class="comment">In<sp/>summary,<sp/>we<sp/>calculate<sp/>the<sp/>percent<sp/>distance<sp/>from<sp/>the<sp/>endpoints<sp/>on<sp/>each<sp/>line<sp/>(s,<sp/>t)<sp/>and<sp/>if</highlight></codeline>
<codeline lineno="177"><highlight class="comment">both<sp/>values<sp/>are<sp/>between<sp/>0<sp/>and<sp/>1,<sp/>the<sp/>intersection<sp/>must<sp/>occur<sp/>within<sp/>both<sp/>domains</highlight></codeline>
<codeline lineno="178"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Line::intersects(<ref refid="class_line" kindref="compound">Line</ref><sp/>line,<sp/>Vector2f&amp;<sp/>intersectionPoint,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>extendLine)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>do<sp/>this<sp/>to<sp/>help<sp/>with<sp/>naming<sp/>and<sp/>keeping<sp/>our<sp/>variables<sp/>organized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>reference<sp/>linked<sp/>above<sp/>(ik,<sp/>1<sp/>indexing<sp/>is<sp/>gross)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x[5]<sp/>=<sp/>{0,<sp/>getStart().x,<sp/>getEnd().x,<sp/>line.getStart().x,<sp/>line.getEnd().x};</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y[5]<sp/>=<sp/>{0,<sp/>getStart().y,<sp/>getEnd().y,<sp/>line.getStart().y,<sp/>line.getEnd().y};</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>precompute<sp/>the<sp/>denominator<sp/>to<sp/>detect<sp/>parallel<sp/>lines<sp/>and<sp/>to<sp/>save<sp/>on<sp/>resources</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>denominator<sp/>=<sp/>((x[4]<sp/>-<sp/>x[3])*(y[2]<sp/>-<sp/>y[1])<sp/>-<sp/>(x[2]<sp/>-<sp/>x[1])*(y[4]<sp/>-<sp/>y[3]));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>parallel<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(denominator<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>only<sp/>way<sp/>parallel<sp/>lines<sp/>intersect<sp/>is<sp/>if<sp/>they<sp/>are<sp/>the<sp/>same<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line.getIntercept()<sp/>==<sp/>getIntercept())</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>((x[4]-x[3])*(y[3]-y[1])<sp/>-<sp/>(x[3]-x[1])*(y[4]<sp/>-<sp/>y[3]))<sp/>/<sp/>denominator;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>((x[2]-x[1])*(y[3]-y[1])<sp/>-<sp/>(x[3]-x[1])*(y[2]<sp/>-<sp/>y[1]))<sp/>/<sp/>denominator;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>denotes<sp/>whether<sp/>or<sp/>not<sp/>the<sp/>lines<sp/>intersect<sp/>within<sp/>their<sp/>domain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Even<sp/>if<sp/>they<sp/>don&apos;t,<sp/>we<sp/>check<sp/>if<sp/>we<sp/>are<sp/>extending<sp/>the<sp/>line<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>case<sp/>we<sp/>only<sp/>need<sp/>to<sp/>check<sp/>the<sp/>other<sp/>line&apos;s<sp/>domain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((s<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>s<sp/>&lt;=<sp/>1<sp/>&amp;&amp;<sp/>t<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>t<sp/>&lt;=<sp/>1)<sp/>||<sp/>(extendLine<sp/>&amp;&amp;<sp/>t<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>t<sp/>&lt;=<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>now<sp/>calculate<sp/>the<sp/>intersection<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intersectionPoint.x<sp/>=<sp/>x[1]<sp/>+<sp/>(x[2]<sp/>-<sp/>x[1])*s;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intersectionPoint.y<sp/>=<sp/>y[1]<sp/>+<sp/>(y[2]<sp/>-<sp/>y[1])*s;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>they<sp/>aren&apos;t<sp/>intersecting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Line::intersects(<ref refid="class_line" kindref="compound">Line</ref><sp/>line)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector2f<sp/>v;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>intersects(line,<sp/>v);</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/><sp/>OFFSET</highlight></codeline>
<codeline lineno="223"><highlight class="comment"></highlight></codeline>
<codeline lineno="224"><highlight class="comment">Since<sp/>we<sp/>will<sp/>likely<sp/>need<sp/>to<sp/>offset<sp/>our<sp/>lines<sp/>because<sp/>our<sp/>lines<sp/>will<sp/>not<sp/>always<sp/>be<sp/>at<sp/>(0,<sp/>0),<sp/>we<sp/>have<sp/>a<sp/>method<sp/>to<sp/></highlight></codeline>
<codeline lineno="225"><highlight class="comment">properly<sp/>store<sp/>and<sp/>change<sp/>the<sp/>offset.</highlight></codeline>
<codeline lineno="226"><highlight class="comment"></highlight></codeline>
<codeline lineno="227"><highlight class="comment">We<sp/>store<sp/>this<sp/>value<sp/>as<sp/>a<sp/>member<sp/>variable,<sp/>so<sp/>that<sp/>if<sp/>we<sp/>need<sp/>to<sp/>offset<sp/>again,<sp/>we<sp/>don&apos;t<sp/>have<sp/>to<sp/>account<sp/>for<sp/>the<sp/>previous<sp/>offset</highlight></codeline>
<codeline lineno="228"><highlight class="comment">For<sp/>example:</highlight></codeline>
<codeline lineno="229"><highlight class="comment"></highlight></codeline>
<codeline lineno="230"><highlight class="comment">someLine.offset(Vector2f(10,<sp/>10));</highlight></codeline>
<codeline lineno="231"><highlight class="comment">//<sp/>The<sp/>origin<sp/>of<sp/>our<sp/>coordinate<sp/>system<sp/>will<sp/>be<sp/>set<sp/>at<sp/>(10,<sp/>10)</highlight></codeline>
<codeline lineno="232"><highlight class="comment"></highlight></codeline>
<codeline lineno="233"><highlight class="comment">someLine.offset(Vector2f(20,<sp/>20));</highlight></codeline>
<codeline lineno="234"><highlight class="comment">//<sp/>The<sp/>origin<sp/>of<sp/>our<sp/>coordinate<sp/>system<sp/>will<sp/>be<sp/>set<sp/>at<sp/>(20,<sp/>20),<sp/>NOT<sp/>(30,<sp/>30)</highlight></codeline>
<codeline lineno="235"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Line::offset(Vector2f<sp/>offset)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>we<sp/>remove<sp/>the<sp/>previous<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>m_start<sp/>-=<sp/>m_offset;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>m_end<sp/>-=<sp/>m_offset;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>we<sp/>store<sp/>the<sp/>new<sp/>offset<sp/>and<sp/>add<sp/>it<sp/>to<sp/>the<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>m_offset<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>m_start<sp/>+=<sp/>m_offset;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>m_end<sp/>+=<sp/>m_offset;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>recalculate<sp/>the<sp/>intercept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>calculateIntercept();</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/><sp/><sp/>GETTERS</highlight></codeline>
<codeline lineno="253"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Line::getAngle()<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_angle;</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Line::getIntercept()<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_intercept;</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Line::getSlope()<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_slope;</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal">Vector2f<sp/>Line::getStart()<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_start;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal">Vector2f<sp/>Line::getEnd()<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_end;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/><sp/><sp/><sp/>GET<sp/>DRAWABLE</highlight></codeline>
<codeline lineno="277"><highlight class="comment"></highlight></codeline>
<codeline lineno="278"><highlight class="comment">This<sp/>method<sp/>was<sp/>created<sp/>for<sp/>the<sp/>sole<sp/>purpose<sp/>of<sp/>dubugging<sp/>line<sp/>intersections,<sp/>and<sp/>should<sp/>never<sp/>really<sp/>be<sp/>used<sp/>to<sp/>draw<sp/>a<sp/>line</highlight></codeline>
<codeline lineno="279"><highlight class="comment">It<sp/>is<sp/>for<sp/>this<sp/>reason<sp/>that<sp/>we<sp/>don&apos;t<sp/>hold<sp/>the<sp/>rectangle<sp/>shape<sp/>as<sp/>a<sp/>member<sp/>variable,<sp/>because<sp/>once<sp/>this<sp/>issue<sp/>has<sp/>been<sp/>solved,</highlight></codeline>
<codeline lineno="280"><highlight class="comment">we<sp/>should<sp/>never<sp/>need<sp/>this<sp/>again.</highlight></codeline>
<codeline lineno="281"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal">RectangleShape*<sp/>Line::getDrawable(Color<sp/>color)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>RectangleShape*<sp/>r<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>RectangleShape();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;setSize(Vector2f(sqrt(pow(m_start.x<sp/>-<sp/>m_end.x,<sp/>2)<sp/>+<sp/>pow(m_start.y<sp/>-<sp/>m_end.y,<sp/>2)),<sp/>2));</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;setOrigin(r-&gt;getGlobalBounds().width<sp/>/<sp/>2,<sp/>r-&gt;getGlobalBounds().height<sp/>/<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;setRotation(m_angle);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;setFillColor(color);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;setPosition((m_start<sp/>+<sp/>m_end)<sp/>/<sp/>2.0f);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/><sp/><sp/>ROTATE</highlight></codeline>
<codeline lineno="296"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Line::rotate(Vector2f<sp/>center,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>we<sp/>update<sp/>our<sp/>points<sp/>to<sp/>be<sp/>accounted<sp/>for<sp/>the<sp/>center</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector2f<sp/>p1<sp/>=<sp/>m_start<sp/>-<sp/>center;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector2f<sp/>p2<sp/>=<sp/>m_end<sp/>-<sp/>center;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal">Vector2f<sp/>Line::getPerpendicular()<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Take<sp/>the<sp/>negative<sp/>reciprical<sp/>of<sp/>the<sp/>slope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pSlope<sp/>=<sp/>-1<sp/>/<sp/>getSlope();</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>our<sp/>slope<sp/>is<sp/>y/x,<sp/>so<sp/>our<sp/>vector<sp/>is<sp/>(1,<sp/>slope)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector2f<sp/>perpendicular(1,<sp/>pSlope);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>normalize<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>VectorMath::normalize(perpendicular);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>perpendicular;</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/Line.cpp"/>
  </compounddef>
</doxygen>

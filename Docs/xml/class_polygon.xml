<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="class_polygon" kind="class" language="C++" prot="public">
    <compoundname>Polygon</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Shape</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_polygon_1abea0da7beb9be628d593e14708aa6212" prot="private" static="no" mutable="no">
        <type>const float</type>
        <definition>const float Polygon::DEFAULT_DENSITY</definition>
        <argsstring></argsstring>
        <name>DEFAULT_DENSITY</name>
        <initializer>= 1.f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="58" column="1" bodyfile="src/Polygon.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_polygon_1aa0c37ebb94e0d1c24acf7888ab82e5ef" prot="private" static="no" mutable="no">
        <type>vector&lt; Vector2f &gt;</type>
        <definition>vector&lt;Vector2f&gt; Polygon::m_points</definition>
        <argsstring></argsstring>
        <name>m_points</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="63" column="1" bodyfile="src/Polygon.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_polygon_1ab96f8891ca282600d1ae55bdc40b8f5d" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Polygon::m_numVerticies</definition>
        <argsstring></argsstring>
        <name>m_numVerticies</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="68" column="1" bodyfile="src/Polygon.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_polygon_1a39f1daf0c324877ece7a1e64fd5fe03a" prot="private" static="no" mutable="no">
        <type>Vector2f</type>
        <definition>Vector2f Polygon::m_centroid</definition>
        <argsstring></argsstring>
        <name>m_centroid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="69" column="1" bodyfile="src/Polygon.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_polygon_1adde6345f2f140d54db82f22cb8b433c7" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float Polygon::m_farthestVertex</definition>
        <argsstring></argsstring>
        <name>m_farthestVertex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="70" column="1" bodyfile="src/Polygon.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_polygon_1aa2bd50d4ea5bfa2572cfc318745f6e36" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float Polygon::m_area</definition>
        <argsstring></argsstring>
        <name>m_area</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="71" column="1" bodyfile="src/Polygon.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_polygon_1ab6e4175395d76cb532590c7998dceeb3" prot="private" static="no" mutable="no">
        <type>vector&lt; <ref refid="class_line" kindref="compound">Line</ref> &gt;</type>
        <definition>vector&lt;Line&gt; Polygon::m_lines</definition>
        <argsstring></argsstring>
        <name>m_lines</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="77" column="1" bodyfile="src/Polygon.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_polygon_1a1a97491c2637b2aa13949dc8bf2079d6" prot="private" static="no" mutable="no">
        <type>vector&lt; float &gt;</type>
        <definition>vector&lt;float&gt; Polygon::m_triangleHeights</definition>
        <argsstring></argsstring>
        <name>m_triangleHeights</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="78" column="1" bodyfile="src/Polygon.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_polygon_1ab441b8e27ee343911b1eaa6b0d8cc4ec" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Polygon::m_isSolid</definition>
        <argsstring></argsstring>
        <name>m_isSolid</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="81" column="1" bodyfile="src/Polygon.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_polygon_1ad5dae3150d623b3b4b3b794fb3bf204f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool Polygon::m_moveableByCollision</definition>
        <argsstring></argsstring>
        <name>m_moveableByCollision</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="82" column="1" bodyfile="src/Polygon.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_polygon_1aabde0aa076f286296be2a5a3e91b6eb0" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float Polygon::m_density</definition>
        <argsstring></argsstring>
        <name>m_density</name>
        <initializer>= DEFAULT_DENSITY</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="83" column="1" bodyfile="src/Polygon.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_polygon_1abeba61b3ad1a2268feb5e5b68455a8b9" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float Polygon::m_mass</definition>
        <argsstring></argsstring>
        <name>m_mass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="84" column="1" bodyfile="src/Polygon.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_polygon_1ab74b324dc831b37689f497b4c8e1dabe" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float Polygon::m_momentOfInertia</definition>
        <argsstring></argsstring>
        <name>m_momentOfInertia</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="85" column="1" bodyfile="src/Polygon.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_polygon_1afd3913ac98e65db160c9a20f5c6076e8" prot="private" static="no" mutable="no">
        <type>Vector2f</type>
        <definition>Vector2f Polygon::m_velocity</definition>
        <argsstring></argsstring>
        <name>m_velocity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="89" column="1" bodyfile="src/Polygon.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_polygon_1a2ebe6c75ef6bfcad3ae3f04cb04ed5b1" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float Polygon::m_angularVelocity</definition>
        <argsstring></argsstring>
        <name>m_angularVelocity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="90" column="1" bodyfile="src/Polygon.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_polygon_1af7169e174e095973fad13620adb78a3f" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float Polygon::m_rigidity</definition>
        <argsstring></argsstring>
        <name>m_rigidity</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="94" column="1" bodyfile="src/Polygon.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_polygon_1a86eb37b0d2b846a11b8ff384e026529f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Polygon::getPixels</definition>
        <argsstring>()</argsstring>
        <name>getPixels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a41b48218ddb7bba06869a75edc108ba6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Polygon::contains</definition>
        <argsstring>(vector&lt; Color &gt; &amp;vec, Color c)</argsstring>
        <name>contains</name>
        <param>
          <type>vector&lt; Color &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>Color</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Checks whether a color is contained within a vector of colors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of colors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>A specific color </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true If vec contains c </para>
</simplesect>
<simplesect kind="return"><para>false If vec doesn&apos;t contain c </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="97" column="1" bodyfile="src/Polygon.cpp" bodystart="684" bodyend="695"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1ad32929fd8d534e13549e25b9b0726fad" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Polygon::contains</definition>
        <argsstring>(vector&lt; Vector2f &gt; &amp;hitboxVerticies, Vector2f point)</argsstring>
        <name>contains</name>
        <param>
          <type>vector&lt; Vector2f &gt; &amp;</type>
          <declname>hitboxVerticies</declname>
          <defname>vec</defname>
        </param>
        <param>
          <type>Vector2f</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Checks whether a point is contained within a vector of points. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of points </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>A specific point </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true If vec contains point </para>
</simplesect>
<simplesect kind="return"><para>false If vec doesn&apos;t contain point </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="98" column="1" bodyfile="src/Polygon.cpp" bodystart="705" bodyend="715"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a83af7f84793d27a041951881db7c2597" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Polygon::findCentroid</definition>
        <argsstring>()</argsstring>
        <name>findCentroid</name>
        <briefdescription>
<para>Calculate the centroid of our object by finding the rightmost, leftmost, topmost, etc. points and taking the average of them all. Should give about the same as taking half of each getGlobalBounds() width and height (for setting the origin). Also calculates the farthest vertex distance from the centroid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="99" column="1" bodyfile="src/Polygon.cpp" bodystart="894" bodyend="932"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a60bbab52a8835dd170679798210999b9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Polygon::createLines</definition>
        <argsstring>()</argsstring>
        <name>createLines</name>
        <briefdescription>
<para>Using our current m_points, we recreate the lines that represent the boundary of our shape. This is called whenever our shape is transformed (moved, rotated, scaled) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="101" column="1" bodyfile="src/Polygon.cpp" bodystart="813" bodyend="876"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1aa58325851211da753e5b7fcc5ac89844" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Polygon::calculateMass</definition>
        <argsstring>()</argsstring>
        <name>calculateMass</name>
        <briefdescription>
<para>Calculate the mass of the polygon using the area and density. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="104" column="1" bodyfile="src/Polygon.cpp" bodystart="976" bodyend="979"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1aa27c42ef89bdced218b65477fabaf6d1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Polygon::calculateMomentOfInertia</definition>
        <argsstring>()</argsstring>
        <name>calculateMomentOfInertia</name>
        <briefdescription>
<para>Calculate the (relative) moment of inertia of the object by using the distance from the centroid to every vertex on the boundary. Only has value when comparing moment of inertia&apos;s between shapes, doesn&apos;t give the actual moment of inertia of a real object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="105" column="1" bodyfile="src/Polygon.cpp" bodystart="987" bodyend="1006"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_polygon_1a55f28f7bcae8df65ea11b99ff192b7d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Polygon::Polygon</definition>
        <argsstring>(Texture *texture, Detail detail=Detail::Optimal, vector&lt; Color &gt; ignoredColors={})</argsstring>
        <name>Polygon</name>
        <param>
          <type>Texture *</type>
          <declname>texture</declname>
        </param>
        <param>
          <type>Detail</type>
          <declname>detail</declname>
          <defval>Detail::Optimal</defval>
        </param>
        <param>
          <type>vector&lt; Color &gt;</type>
          <declname>ignoredColors</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="class_polygon" kindref="compound">Polygon</ref> object from a given texture (image). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>texture</parametername>
</parameternamelist>
<parameterdescription>
<para>The texture for the shape/sprite we want to model </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>detail</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of detail to keep in the shape, from least to most: Less, More, Optimal, Exact </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ignoredColors</parametername>
</parameternamelist>
<parameterdescription>
<para>By default, all pixels that arent (0, 0, 0, 0) will be included, any colors specified here will also be ignored </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para><itemizedlist>
<listitem></listitem></itemizedlist>
</para>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="119" column="1" bodyfile="src/Polygon.cpp" bodystart="10" bodyend="670"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1ac44cbd15f8a7a389d9f553e1bdeceea0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Polygon::Polygon</definition>
        <argsstring>(vector&lt; Vector2f &gt; points)</argsstring>
        <name>Polygon</name>
        <param>
          <type>vector&lt; Vector2f &gt;</type>
          <declname>points</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="class_polygon" kindref="compound">Polygon</ref> object from a vector of points. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>The points that constitute our shape </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="124" column="1" bodyfile="src/Polygon.cpp" bodystart="731" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1abb2febc822883a9bbc7fdfac64475539" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Polygon::Polygon</definition>
        <argsstring>(CircleShape shape)</argsstring>
        <name>Polygon</name>
        <param>
          <type>CircleShape</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="class_polygon" kindref="compound">Polygon</ref> object from a sf::CircleShape object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The CircleShape object whose points we will use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="125" column="1" bodyfile="src/Polygon.cpp" bodystart="747" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1ac83748b0a87551cc4e190254303f9911" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Polygon::Polygon</definition>
        <argsstring>(RectangleShape shape)</argsstring>
        <name>Polygon</name>
        <param>
          <type>RectangleShape</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="class_polygon" kindref="compound">Polygon</ref> object from a sf::RectangleShape object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The RectangleShape object whose points we will use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="126" column="1" bodyfile="src/Polygon.cpp" bodystart="769" bodyend="784"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a37104a58675193c3598c19b41f4eadda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Polygon::Polygon</definition>
        <argsstring>(ConvexShape shape)</argsstring>
        <name>Polygon</name>
        <param>
          <type>ConvexShape</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="class_polygon" kindref="compound">Polygon</ref> object from a sf::ConvexShape object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The ConvexShape object who points we will use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="127" column="1" bodyfile="src/Polygon.cpp" bodystart="791" bodyend="806"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1af16db77f60fa0f12b72cf0517aca0669" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>size_t Polygon::getPointCount</definition>
        <argsstring>() const</argsstring>
        <name>getPointCount</name>
        <briefdescription>
<para>Get the number of verticies on our polygon. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size_t The number of verticies </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="132" column="1" bodyfile="src/Polygon.cpp" bodystart="939" bodyend="941"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a336e2540d24e30a4be6be163e2137323" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>Vector2f</type>
        <definition>Vector2f Polygon::getPoint</definition>
        <argsstring>(size_t index) const</argsstring>
        <name>getPoint</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get the vertex at index in the vector m_points. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the point we are looking for </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Vector2f The point at index in m_points </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="133" column="1" bodyfile="src/Polygon.cpp" bodystart="949" bodyend="951"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a5013385231c9027d00cb57dffc030ae4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; Vector2f &gt;</type>
        <definition>vector&lt; Vector2f &gt; Polygon::getPoints</definition>
        <argsstring>()</argsstring>
        <name>getPoints</name>
        <briefdescription>
<para>Returns the entire vector of points that represent the shape, without any modifications from transformations (rotate, move, scale) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>vector&lt;Vector2f&gt; Our shape&apos;s vector of verticies </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="135" column="1" bodyfile="src/Polygon.cpp" bodystart="959" bodyend="961"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1acbeaa5a9990ee704fdfa766d4a34b86c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="class_line" kindref="compound">Line</ref> &gt;</type>
        <definition>vector&lt; Line &gt; Polygon::getLines</definition>
        <argsstring>()</argsstring>
        <name>getLines</name>
        <briefdescription>
<para>Return the lines that represent the polygon&apos;s outline/border. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>vector&lt;Line&gt; A vector of lines that represent the outline </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="137" column="1" bodyfile="src/Polygon.cpp" bodystart="883" bodyend="886"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1aa4da77df0658cdcc0797443844c69a3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Polygon::getFarthestVertex</definition>
        <argsstring>()</argsstring>
        <name>getFarthestVertex</name>
        <briefdescription>
<para>Returns the distance of the farthest vertex from the centroid. Calculated in findCentroid() </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>float The farthest distance of the shape </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="138" column="1" bodyfile="src/Polygon.cpp" bodystart="1131" bodyend="1137"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a70345633fc22991a66923b2b9db197fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Vector2f</type>
        <definition>Vector2f Polygon::getCentroid</definition>
        <argsstring>()</argsstring>
        <name>getCentroid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="139" column="1" bodyfile="src/Polygon.cpp" bodystart="1140" bodyend="1142"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a0fc684c823f560d066bc8fdfe10fd8f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Polygon::setSolid</definition>
        <argsstring>(bool state)</argsstring>
        <name>setSolid</name>
        <param>
          <type>bool</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Set whether the shape is solid (can collide with other shapes) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not the shape is solid </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="142" column="1" bodyfile="src/Polygon.cpp" bodystart="1013" bodyend="1015"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a531b42b03e52789c8b9c6869933bf7d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Polygon::isSolid</definition>
        <argsstring>()</argsstring>
        <name>isSolid</name>
        <briefdescription>
<para>Check whether or not the shape can collide with other shapes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true Can collide </para>
</simplesect>
<simplesect kind="return"><para>false Cannot collide </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="143" column="1" bodyfile="src/Polygon.cpp" bodystart="1023" bodyend="1025"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a5325135466047ff1a8bb215905c54c83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Polygon::setRigidity</definition>
        <argsstring>(float value)</argsstring>
        <name>setRigidity</name>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set how much energy is conserved when this object collides with another. 0 for no energy conserved (completely inelastic collision) and 1 for completely elastic (all energy conserved) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The new rigidity, 0 for complete inelastic, 1 for complete elastic </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="145" column="1" bodyfile="src/Polygon.cpp" bodystart="1033" bodyend="1035"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a435f03ba82088fbde142d21950cfa1f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Polygon::getRigidity</definition>
        <argsstring>()</argsstring>
        <name>getRigidity</name>
        <briefdescription>
<para>Get how much energy is conserved when this object collides with another. 0 for no energy conserved (completely inelastic collision) and 1 for completely elastic (all energy conserved) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>float The rigidity, 0 for complete inelastic, 1 for complete elastic </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="146" column="1" bodyfile="src/Polygon.cpp" bodystart="1043" bodyend="1045"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1ac379bd1b47a91b062cb1489f4be11b2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Polygon::setMovableByCollision</definition>
        <argsstring>(bool value)</argsstring>
        <name>setMovableByCollision</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set whether the shape can be moved by being collided with by another object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not the shape can be moved by another polygon </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="148" column="1" bodyfile="src/Polygon.cpp" bodystart="1052" bodyend="1054"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a83af7b70f89b8b27f5dc78f27dcd60d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Polygon::isMovableByCollision</definition>
        <argsstring>()</argsstring>
        <name>isMovableByCollision</name>
        <briefdescription>
<para>Get whether the shape can be moved by being collided with by another object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true The shape can be moved </para>
</simplesect>
<simplesect kind="return"><para>false The shape cannot be moved </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="149" column="1" bodyfile="src/Polygon.cpp" bodystart="1062" bodyend="1064"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a21749fb83e0fa8fd98cf646e0e4cbadc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Polygon::setDensity</definition>
        <argsstring>(float newDensity)</argsstring>
        <name>setDensity</name>
        <param>
          <type>float</type>
          <declname>newDensity</declname>
        </param>
        <briefdescription>
<para>Set the density of the object, used in calculate its mass and moment of inertia (default is 1) and recalculate both values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newDensity</parametername>
</parameternamelist>
<parameterdescription>
<para>The density of the object (default is 1) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="151" column="1" bodyfile="src/Polygon.cpp" bodystart="1072" bodyend="1077"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a93f38d702fe7c95af0ac72910c00908e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Polygon::getDensity</definition>
        <argsstring>()</argsstring>
        <name>getDensity</name>
        <briefdescription>
<para>Get the relative density of the polygon. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>float The density of the polygon </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="152" column="1" bodyfile="src/Polygon.cpp" bodystart="1084" bodyend="1086"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a9c5d5b2df7caf0dc80b00fbcae0a74e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Polygon::getMass</definition>
        <argsstring>()</argsstring>
        <name>getMass</name>
        <briefdescription>
<para>Return the mass of the polygon, using the density and area to calculate. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>float The mass of the shape </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="154" column="1" bodyfile="src/Polygon.cpp" bodystart="1093" bodyend="1095"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1af029d3b7c0e523ab07b376a193b6c7a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Polygon::getMomentOfInertia</definition>
        <argsstring>()</argsstring>
        <name>getMomentOfInertia</name>
        <briefdescription>
<para>Return the moment of inertia of the polygon, using the density and vertex distribution. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>float The moment of inertia of the shape </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="155" column="1" bodyfile="src/Polygon.cpp" bodystart="1102" bodyend="1104"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1ae404b76af51f552e3bc9dc57ea1d8985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Polygon::setVelocity</definition>
        <argsstring>(Vector2f newVelocity)</argsstring>
        <name>setVelocity</name>
        <param>
          <type>Vector2f</type>
          <declname>newVelocity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="160" column="1" bodyfile="src/Polygon.cpp" bodystart="1225" bodyend="1227"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a82909752be649f103b26657aae3ff0c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Vector2f</type>
        <definition>Vector2f Polygon::getVelocity</definition>
        <argsstring>()</argsstring>
        <name>getVelocity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="161" column="1" bodyfile="src/Polygon.cpp" bodystart="1221" bodyend="1223"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a9444a506f5e33f11772854396e1aae0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Polygon::setAngularVelocity</definition>
        <argsstring>(float newAngularVelocity)</argsstring>
        <name>setAngularVelocity</name>
        <param>
          <type>float</type>
          <declname>newAngularVelocity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="162" column="1" bodyfile="src/Polygon.cpp" bodystart="1233" bodyend="1235"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a1c28d47f1c0f779cfd5ef31815046a6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Polygon::getAngularVelocity</definition>
        <argsstring>()</argsstring>
        <name>getAngularVelocity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="163" column="1" bodyfile="src/Polygon.cpp" bodystart="1229" bodyend="1231"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a556290c37a29ce71f8488a75509b56af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Polygon::update</definition>
        <argsstring>(float elapsedTime)</argsstring>
        <name>update</name>
        <param>
          <type>float</type>
          <declname>elapsedTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="165" column="1" bodyfile="src/Polygon.cpp" bodystart="1215" bodyend="1219"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1aeb1576854a28a02afaa636aadf31b992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Polygon::adjustVelocityFromCollision</definition>
        <argsstring>(Vector2f resultant, Polygon shape)</argsstring>
        <name>adjustVelocityFromCollision</name>
        <param>
          <type>Vector2f</type>
          <declname>resultant</declname>
        </param>
        <param>
          <type><ref refid="class_polygon" kindref="compound">Polygon</ref></type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="166" column="1" bodyfile="src/Intersects.cpp" bodystart="130" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1aacc719afa9e8befd7ab7ba5ea3eb4d24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Polygon::setScale</definition>
        <argsstring>(const Vector2f &amp;scale)</argsstring>
        <name>setScale</name>
        <param>
          <type>const Vector2f &amp;</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="177" column="1" bodyfile="src/Polygon.cpp" bodystart="1150" bodyend="1154"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a1454b2d9f4ca39f627ea6c54a26a3287" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Polygon::setScale</definition>
        <argsstring>(float xScale, float yScale)</argsstring>
        <name>setScale</name>
        <param>
          <type>float</type>
          <declname>xScale</declname>
        </param>
        <param>
          <type>float</type>
          <declname>yScale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="178" column="1" bodyfile="src/Polygon.cpp" bodystart="1156" bodyend="1160"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1ab908fe54a3dfad70b489578b4d0f0e42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Polygon::scale</definition>
        <argsstring>(const Vector2f &amp;scale)</argsstring>
        <name>scale</name>
        <param>
          <type>const Vector2f &amp;</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="179" column="1" bodyfile="src/Polygon.cpp" bodystart="1162" bodyend="1166"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1ac2b18a3139994184f83967add25f72aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Polygon::scale</definition>
        <argsstring>(float xFactor, float yFactor)</argsstring>
        <name>scale</name>
        <param>
          <type>float</type>
          <declname>xFactor</declname>
        </param>
        <param>
          <type>float</type>
          <declname>yFactor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="180" column="1" bodyfile="src/Polygon.cpp" bodystart="1168" bodyend="1172"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a6eaf72c376c1fc1d6a9fba7b34b2d93d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Polygon::setRotation</definition>
        <argsstring>(float angle)</argsstring>
        <name>setRotation</name>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="181" column="1" bodyfile="src/Polygon.cpp" bodystart="1174" bodyend="1178"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1aa31dcb66b6c3bffd9643590abf805c26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Polygon::rotate</definition>
        <argsstring>(float angle)</argsstring>
        <name>rotate</name>
        <param>
          <type>float</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="182" column="1" bodyfile="src/Polygon.cpp" bodystart="1180" bodyend="1184"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a79db7b74993e7c419e1e3243a6b2e4e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Polygon::setPosition</definition>
        <argsstring>(const Vector2f &amp;position)</argsstring>
        <name>setPosition</name>
        <param>
          <type>const Vector2f &amp;</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="183" column="1" bodyfile="src/Polygon.cpp" bodystart="1186" bodyend="1190"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a59fc0fa86f807dc3921bae20739fdbb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Polygon::setPosition</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>setPosition</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="184" column="1" bodyfile="src/Polygon.cpp" bodystart="1192" bodyend="1196"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a21dc29d3c6dfa6d59a4f62dc0b135e50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Polygon::move</definition>
        <argsstring>(const Vector2f &amp;offset)</argsstring>
        <name>move</name>
        <param>
          <type>const Vector2f &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="185" column="1" bodyfile="src/Polygon.cpp" bodystart="1198" bodyend="1202"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1ab809ff31ab4a7ec2ebe6e5b3ef2217c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Polygon::move</definition>
        <argsstring>(float xOffset, float yOffset)</argsstring>
        <name>move</name>
        <param>
          <type>float</type>
          <declname>xOffset</declname>
        </param>
        <param>
          <type>float</type>
          <declname>yOffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="186" column="1" bodyfile="src/Polygon.cpp" bodystart="1204" bodyend="1208"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a15574e83f243b648b0d70537b41118ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Polygon::intersects</definition>
        <argsstring>(Polygon shape)</argsstring>
        <name>intersects</name>
        <param>
          <type><ref refid="class_polygon" kindref="compound">Polygon</ref></type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="196" column="1" bodyfile="src/Intersects.cpp" bodystart="38" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1ad4a0ce3f20094604b01dd96d06257ea1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Polygon::intersects</definition>
        <argsstring>(RectangleShape shape)</argsstring>
        <name>intersects</name>
        <param>
          <type>RectangleShape</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="197" column="1" bodyfile="src/Intersects.cpp" bodystart="8" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1ad9ce9cb3c6871e75099a261a810bedcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Polygon::intersects</definition>
        <argsstring>(CircleShape shape)</argsstring>
        <name>intersects</name>
        <param>
          <type>CircleShape</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="198" column="1" bodyfile="src/Intersects.cpp" bodystart="13" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a24df2b2ee889cdd07ea91ccaa4810a93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Polygon::intersects</definition>
        <argsstring>(ConvexShape shape)</argsstring>
        <name>intersects</name>
        <param>
          <type>ConvexShape</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="199" column="1" bodyfile="src/Intersects.cpp" bodystart="18" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a713983b426b75523599e862924bca782" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Polygon::intersects</definition>
        <argsstring>(Polygon shape, Vector2f &amp;resultant)</argsstring>
        <name>intersects</name>
        <param>
          <type><ref refid="class_polygon" kindref="compound">Polygon</ref></type>
          <declname>shape</declname>
        </param>
        <param>
          <type>Vector2f &amp;</type>
          <declname>resultant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="205" column="1" bodyfile="src/Intersects.cpp" bodystart="65" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1aa1af5f5482999785aed533d16279c67b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Polygon::intersects</definition>
        <argsstring>(RectangleShape shape, Vector2f &amp;resultant)</argsstring>
        <name>intersects</name>
        <param>
          <type>RectangleShape</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>Vector2f &amp;</type>
          <declname>resultant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a874be1c28a2a1477d1ea5d85ece74822" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Polygon::intersects</definition>
        <argsstring>(CircleShape shape, Vector2f &amp;resultant)</argsstring>
        <name>intersects</name>
        <param>
          <type>CircleShape</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>Vector2f &amp;</type>
          <declname>resultant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1ab7fb23f4dbf6277688c4fb11f0a5938f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Polygon::intersects</definition>
        <argsstring>(ConvexShape shape, Vector2f &amp;resultant)</argsstring>
        <name>intersects</name>
        <param>
          <type>ConvexShape</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>Vector2f &amp;</type>
          <declname>resultant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a1501a824c6d97ce3ef8efc5443ab1f8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Polygon::contains</definition>
        <argsstring>(Polygon shape)</argsstring>
        <name>contains</name>
        <param>
          <type><ref refid="class_polygon" kindref="compound">Polygon</ref></type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="217" column="1" bodyfile="src/Intersects.cpp" bodystart="178" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a1712cd82ff38472dd9ba87f0f8b37a9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Polygon::contains</definition>
        <argsstring>(RectangleShape shape)</argsstring>
        <name>contains</name>
        <param>
          <type>RectangleShape</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="218" column="1" bodyfile="src/Intersects.cpp" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a60fe86ef61eeb9903a8eef32870ea1c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Polygon::contains</definition>
        <argsstring>(CircleShape shape)</argsstring>
        <name>contains</name>
        <param>
          <type>CircleShape</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="219" column="1" bodyfile="src/Intersects.cpp" bodystart="156" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1aea5d69a1006a0b6b08dbc3e236b302ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Polygon::contains</definition>
        <argsstring>(ConvexShape shape)</argsstring>
        <name>contains</name>
        <param>
          <type>ConvexShape</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="220" column="1" bodyfile="src/Intersects.cpp" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="class_polygon_1a00dc79655e7be6b73a83414a6733ec9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Polygon::getArea</definition>
        <argsstring>()</argsstring>
        <name>getArea</name>
        <briefdescription>
<para>Return the area of the polygon. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>float The area of the polygon </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="226" column="1" bodyfile="src/Polygon.cpp" bodystart="968" bodyend="970"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_polygon_1a21a607cdb559f8e4a98fa54d0b9d63a9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Polygon::getArea</definition>
        <argsstring>(vector&lt; Vector2f &gt; points, float &amp;value)</argsstring>
        <name>getArea</name>
        <param>
          <type>vector&lt; Vector2f &gt;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>This is a static method that finds the area of any given shape (vector of points) Ngl, I don&apos;t remember where I found this method for finding the area of a polygon, but will post when I find it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>A Vector of points the represent our shape. See <ref refid="class_polygon_1a5013385231c9027d00cb57dffc030ae4" kindref="member">Polygon::getPoints()</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>A referenced float that our area will be stored in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Polygon.hpp" line="225" column="1" bodyfile="src/Polygon.cpp" bodystart="1114" bodyend="1124"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Polygon</label>
        <link refid="class_polygon"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Shape</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>Polygon</label>
        <link refid="class_polygon"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>Shape</label>
      </node>
    </collaborationgraph>
    <location file="src/Polygon.hpp" line="54" column="1" bodyfile="src/Polygon.hpp" bodystart="54" bodyend="227"/>
    <listofallmembers>
      <member refid="class_polygon_1aeb1576854a28a02afaa636aadf31b992" prot="public" virt="non-virtual"><scope>Polygon</scope><name>adjustVelocityFromCollision</name></member>
      <member refid="class_polygon_1aa58325851211da753e5b7fcc5ac89844" prot="private" virt="non-virtual"><scope>Polygon</scope><name>calculateMass</name></member>
      <member refid="class_polygon_1aa27c42ef89bdced218b65477fabaf6d1" prot="private" virt="non-virtual"><scope>Polygon</scope><name>calculateMomentOfInertia</name></member>
      <member refid="class_polygon_1a41b48218ddb7bba06869a75edc108ba6" prot="private" virt="non-virtual"><scope>Polygon</scope><name>contains</name></member>
      <member refid="class_polygon_1ad32929fd8d534e13549e25b9b0726fad" prot="private" virt="non-virtual"><scope>Polygon</scope><name>contains</name></member>
      <member refid="class_polygon_1a1501a824c6d97ce3ef8efc5443ab1f8e" prot="public" virt="non-virtual"><scope>Polygon</scope><name>contains</name></member>
      <member refid="class_polygon_1a1712cd82ff38472dd9ba87f0f8b37a9f" prot="public" virt="non-virtual"><scope>Polygon</scope><name>contains</name></member>
      <member refid="class_polygon_1a60fe86ef61eeb9903a8eef32870ea1c4" prot="public" virt="non-virtual"><scope>Polygon</scope><name>contains</name></member>
      <member refid="class_polygon_1aea5d69a1006a0b6b08dbc3e236b302ea" prot="public" virt="non-virtual"><scope>Polygon</scope><name>contains</name></member>
      <member refid="class_polygon_1a60bbab52a8835dd170679798210999b9" prot="private" virt="non-virtual"><scope>Polygon</scope><name>createLines</name></member>
      <member refid="class_polygon_1abea0da7beb9be628d593e14708aa6212" prot="private" virt="non-virtual"><scope>Polygon</scope><name>DEFAULT_DENSITY</name></member>
      <member refid="class_polygon_1a83af7f84793d27a041951881db7c2597" prot="private" virt="non-virtual"><scope>Polygon</scope><name>findCentroid</name></member>
      <member refid="class_polygon_1a1c28d47f1c0f779cfd5ef31815046a6f" prot="public" virt="non-virtual"><scope>Polygon</scope><name>getAngularVelocity</name></member>
      <member refid="class_polygon_1a21a607cdb559f8e4a98fa54d0b9d63a9" prot="public" virt="non-virtual"><scope>Polygon</scope><name>getArea</name></member>
      <member refid="class_polygon_1a00dc79655e7be6b73a83414a6733ec9a" prot="public" virt="non-virtual"><scope>Polygon</scope><name>getArea</name></member>
      <member refid="class_polygon_1a70345633fc22991a66923b2b9db197fc" prot="public" virt="non-virtual"><scope>Polygon</scope><name>getCentroid</name></member>
      <member refid="class_polygon_1a93f38d702fe7c95af0ac72910c00908e" prot="public" virt="non-virtual"><scope>Polygon</scope><name>getDensity</name></member>
      <member refid="class_polygon_1aa4da77df0658cdcc0797443844c69a3f" prot="public" virt="non-virtual"><scope>Polygon</scope><name>getFarthestVertex</name></member>
      <member refid="class_polygon_1acbeaa5a9990ee704fdfa766d4a34b86c" prot="public" virt="non-virtual"><scope>Polygon</scope><name>getLines</name></member>
      <member refid="class_polygon_1a9c5d5b2df7caf0dc80b00fbcae0a74e2" prot="public" virt="non-virtual"><scope>Polygon</scope><name>getMass</name></member>
      <member refid="class_polygon_1af029d3b7c0e523ab07b376a193b6c7a3" prot="public" virt="non-virtual"><scope>Polygon</scope><name>getMomentOfInertia</name></member>
      <member refid="class_polygon_1a86eb37b0d2b846a11b8ff384e026529f" prot="private" virt="non-virtual"><scope>Polygon</scope><name>getPixels</name></member>
      <member refid="class_polygon_1a336e2540d24e30a4be6be163e2137323" prot="public" virt="virtual"><scope>Polygon</scope><name>getPoint</name></member>
      <member refid="class_polygon_1af16db77f60fa0f12b72cf0517aca0669" prot="public" virt="virtual"><scope>Polygon</scope><name>getPointCount</name></member>
      <member refid="class_polygon_1a5013385231c9027d00cb57dffc030ae4" prot="public" virt="non-virtual"><scope>Polygon</scope><name>getPoints</name></member>
      <member refid="class_polygon_1a435f03ba82088fbde142d21950cfa1f3" prot="public" virt="non-virtual"><scope>Polygon</scope><name>getRigidity</name></member>
      <member refid="class_polygon_1a82909752be649f103b26657aae3ff0c9" prot="public" virt="non-virtual"><scope>Polygon</scope><name>getVelocity</name></member>
      <member refid="class_polygon_1a15574e83f243b648b0d70537b41118ae" prot="public" virt="non-virtual"><scope>Polygon</scope><name>intersects</name></member>
      <member refid="class_polygon_1ad4a0ce3f20094604b01dd96d06257ea1" prot="public" virt="non-virtual"><scope>Polygon</scope><name>intersects</name></member>
      <member refid="class_polygon_1ad9ce9cb3c6871e75099a261a810bedcc" prot="public" virt="non-virtual"><scope>Polygon</scope><name>intersects</name></member>
      <member refid="class_polygon_1a24df2b2ee889cdd07ea91ccaa4810a93" prot="public" virt="non-virtual"><scope>Polygon</scope><name>intersects</name></member>
      <member refid="class_polygon_1a713983b426b75523599e862924bca782" prot="public" virt="non-virtual"><scope>Polygon</scope><name>intersects</name></member>
      <member refid="class_polygon_1aa1af5f5482999785aed533d16279c67b" prot="public" virt="non-virtual"><scope>Polygon</scope><name>intersects</name></member>
      <member refid="class_polygon_1a874be1c28a2a1477d1ea5d85ece74822" prot="public" virt="non-virtual"><scope>Polygon</scope><name>intersects</name></member>
      <member refid="class_polygon_1ab7fb23f4dbf6277688c4fb11f0a5938f" prot="public" virt="non-virtual"><scope>Polygon</scope><name>intersects</name></member>
      <member refid="class_polygon_1a83af7b70f89b8b27f5dc78f27dcd60d7" prot="public" virt="non-virtual"><scope>Polygon</scope><name>isMovableByCollision</name></member>
      <member refid="class_polygon_1a531b42b03e52789c8b9c6869933bf7d3" prot="public" virt="non-virtual"><scope>Polygon</scope><name>isSolid</name></member>
      <member refid="class_polygon_1a2ebe6c75ef6bfcad3ae3f04cb04ed5b1" prot="private" virt="non-virtual"><scope>Polygon</scope><name>m_angularVelocity</name></member>
      <member refid="class_polygon_1aa2bd50d4ea5bfa2572cfc318745f6e36" prot="private" virt="non-virtual"><scope>Polygon</scope><name>m_area</name></member>
      <member refid="class_polygon_1a39f1daf0c324877ece7a1e64fd5fe03a" prot="private" virt="non-virtual"><scope>Polygon</scope><name>m_centroid</name></member>
      <member refid="class_polygon_1aabde0aa076f286296be2a5a3e91b6eb0" prot="private" virt="non-virtual"><scope>Polygon</scope><name>m_density</name></member>
      <member refid="class_polygon_1adde6345f2f140d54db82f22cb8b433c7" prot="private" virt="non-virtual"><scope>Polygon</scope><name>m_farthestVertex</name></member>
      <member refid="class_polygon_1ab441b8e27ee343911b1eaa6b0d8cc4ec" prot="private" virt="non-virtual"><scope>Polygon</scope><name>m_isSolid</name></member>
      <member refid="class_polygon_1ab6e4175395d76cb532590c7998dceeb3" prot="private" virt="non-virtual"><scope>Polygon</scope><name>m_lines</name></member>
      <member refid="class_polygon_1abeba61b3ad1a2268feb5e5b68455a8b9" prot="private" virt="non-virtual"><scope>Polygon</scope><name>m_mass</name></member>
      <member refid="class_polygon_1ab74b324dc831b37689f497b4c8e1dabe" prot="private" virt="non-virtual"><scope>Polygon</scope><name>m_momentOfInertia</name></member>
      <member refid="class_polygon_1ad5dae3150d623b3b4b3b794fb3bf204f" prot="private" virt="non-virtual"><scope>Polygon</scope><name>m_moveableByCollision</name></member>
      <member refid="class_polygon_1ab96f8891ca282600d1ae55bdc40b8f5d" prot="private" virt="non-virtual"><scope>Polygon</scope><name>m_numVerticies</name></member>
      <member refid="class_polygon_1aa0c37ebb94e0d1c24acf7888ab82e5ef" prot="private" virt="non-virtual"><scope>Polygon</scope><name>m_points</name></member>
      <member refid="class_polygon_1af7169e174e095973fad13620adb78a3f" prot="private" virt="non-virtual"><scope>Polygon</scope><name>m_rigidity</name></member>
      <member refid="class_polygon_1a1a97491c2637b2aa13949dc8bf2079d6" prot="private" virt="non-virtual"><scope>Polygon</scope><name>m_triangleHeights</name></member>
      <member refid="class_polygon_1afd3913ac98e65db160c9a20f5c6076e8" prot="private" virt="non-virtual"><scope>Polygon</scope><name>m_velocity</name></member>
      <member refid="class_polygon_1a21dc29d3c6dfa6d59a4f62dc0b135e50" prot="public" virt="non-virtual"><scope>Polygon</scope><name>move</name></member>
      <member refid="class_polygon_1ab809ff31ab4a7ec2ebe6e5b3ef2217c5" prot="public" virt="non-virtual"><scope>Polygon</scope><name>move</name></member>
      <member refid="class_polygon_1a55f28f7bcae8df65ea11b99ff192b7d7" prot="public" virt="non-virtual"><scope>Polygon</scope><name>Polygon</name></member>
      <member refid="class_polygon_1ac44cbd15f8a7a389d9f553e1bdeceea0" prot="public" virt="non-virtual"><scope>Polygon</scope><name>Polygon</name></member>
      <member refid="class_polygon_1abb2febc822883a9bbc7fdfac64475539" prot="public" virt="non-virtual"><scope>Polygon</scope><name>Polygon</name></member>
      <member refid="class_polygon_1ac83748b0a87551cc4e190254303f9911" prot="public" virt="non-virtual"><scope>Polygon</scope><name>Polygon</name></member>
      <member refid="class_polygon_1a37104a58675193c3598c19b41f4eadda" prot="public" virt="non-virtual"><scope>Polygon</scope><name>Polygon</name></member>
      <member refid="class_polygon_1aa31dcb66b6c3bffd9643590abf805c26" prot="public" virt="non-virtual"><scope>Polygon</scope><name>rotate</name></member>
      <member refid="class_polygon_1ab908fe54a3dfad70b489578b4d0f0e42" prot="public" virt="non-virtual"><scope>Polygon</scope><name>scale</name></member>
      <member refid="class_polygon_1ac2b18a3139994184f83967add25f72aa" prot="public" virt="non-virtual"><scope>Polygon</scope><name>scale</name></member>
      <member refid="class_polygon_1a9444a506f5e33f11772854396e1aae0e" prot="public" virt="non-virtual"><scope>Polygon</scope><name>setAngularVelocity</name></member>
      <member refid="class_polygon_1a21749fb83e0fa8fd98cf646e0e4cbadc" prot="public" virt="non-virtual"><scope>Polygon</scope><name>setDensity</name></member>
      <member refid="class_polygon_1ac379bd1b47a91b062cb1489f4be11b2e" prot="public" virt="non-virtual"><scope>Polygon</scope><name>setMovableByCollision</name></member>
      <member refid="class_polygon_1a79db7b74993e7c419e1e3243a6b2e4e2" prot="public" virt="non-virtual"><scope>Polygon</scope><name>setPosition</name></member>
      <member refid="class_polygon_1a59fc0fa86f807dc3921bae20739fdbb1" prot="public" virt="non-virtual"><scope>Polygon</scope><name>setPosition</name></member>
      <member refid="class_polygon_1a5325135466047ff1a8bb215905c54c83" prot="public" virt="non-virtual"><scope>Polygon</scope><name>setRigidity</name></member>
      <member refid="class_polygon_1a6eaf72c376c1fc1d6a9fba7b34b2d93d" prot="public" virt="non-virtual"><scope>Polygon</scope><name>setRotation</name></member>
      <member refid="class_polygon_1aacc719afa9e8befd7ab7ba5ea3eb4d24" prot="public" virt="non-virtual"><scope>Polygon</scope><name>setScale</name></member>
      <member refid="class_polygon_1a1454b2d9f4ca39f627ea6c54a26a3287" prot="public" virt="non-virtual"><scope>Polygon</scope><name>setScale</name></member>
      <member refid="class_polygon_1a0fc684c823f560d066bc8fdfe10fd8f0" prot="public" virt="non-virtual"><scope>Polygon</scope><name>setSolid</name></member>
      <member refid="class_polygon_1ae404b76af51f552e3bc9dc57ea1d8985" prot="public" virt="non-virtual"><scope>Polygon</scope><name>setVelocity</name></member>
      <member refid="class_polygon_1a556290c37a29ce71f8488a75509b56af" prot="public" virt="non-virtual"><scope>Polygon</scope><name>update</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
